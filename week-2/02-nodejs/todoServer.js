/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
// let todos = [
//   {
//       "id": "90701d77-7810-427f-b384-a82798aaa",
//       "title": "tod1",
//       "description": "todo1",
//       "completed": "false"
//   },
//   {
//       "id": "7506a91f-96c1-45c0-8384-35843e51866f",
//       "title": "todo",
//       "description": "todo",
//       "completed": "false"
//   },
//   {
//       "id": "27562aac-8f59-4aa8-b0eb-649254aefa45",
//       "title": "todo5",
//       "description": "todolkhc",
//       "completed": "false"
//   }];

let todos = [];
const { v4: uuidv4 } = require("uuid");

const express = require("express");
const bodyParser = require("body-parser");

const app = express();

app.use(bodyParser.json());

app.get("/todos", (req, res) => {
  res.status(200).json(todos);
});

app.get("/todos/:id", (req, res) => {
  const { id } = req.params;
  const todoItem = todos.find((item) => item.id === id);

  if (todoItem) res.status(200).json(todoItem);
  else res.status(404).send("ToDo Item not found");
});

app.post("/todos", (req, res) => {
  const { title, description, completed } = req.body;

  const newTodoItem = {
    id: uuidv4(),
    title,
    description,
    completed,
  };

  todos.unshift(newTodoItem);

  res.status(201).json(newTodoItem);
});

app.put("/todos/:id", (req, res) => {
  const { id } = req.params;
  const { title, description, completed } = req.body;
  let flag = false;

  todos = todos.map((item) => {
    if (item.id === id) {
      flag = true;
      return { ...item, title, description, completed };
    } else return item;
  });

  if (!flag) res.status(404).send("ID not found");
  else res.status(200).send("Succesfully edited");
});

app.delete("/todos/:id", (req, res) => {
  const { id } = req.params;

  let itemToDelete = todos.find((item) => item.id === id);

  if (!itemToDelete) res.status(404).send("ID not found");
  else {
    todos = todos.filter((item) => item.id !== id);
    res.status(200).send("Successfully Deleted");
  }
});

module.exports = app;
